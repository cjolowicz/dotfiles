; Load C mode.
(require 'cc-mode)

; Don't use more than 8 lines for the compilation window.
(setq compilation-window-height 8)

; Remove all blanks on Backspace and C-d.
(c-toggle-hungry-state 1)

; Use only spaces for indentation.
(defun my-build-tab-stop-list (width)
  (let ((num-tab-stops (/ 80 width))
	(counter 1)
	(ls nil))
    (while (<= counter num-tab-stops)
      (setq ls (cons (* width counter) ls))
      (setq counter (1+ counter)))
    (set (make-local-variable 'tab-stop-list) (nreverse ls))))

(defun my-c-mode-common-hook ()
  (set-fill-column 80)
  (setq my-tab-width 4)
  (my-build-tab-stop-list my-tab-width)
  (setq c-basic-offset my-tab-width)
  (setq backward-delete-char-untabify-method nil)
  (setq compilation-scroll-output t)
  (set-default 'align-to-tab-stop nil)
  (show-paren-mode t)
  (setq indent-tabs-mode nil)
  ;; indentation (use `C-h C-v c-offsets-alist' for documentation)
  (c-set-offset 'namespace-open        '0)
  (c-set-offset 'namespace-close       '0)
  (c-set-offset 'innamespace           '0)
  (c-set-offset 'defun-open            '0)
  (c-set-offset 'defun-close           '0)
  (c-set-offset 'defun-block-intro     '+)
  (c-set-offset 'class-open            '0)
  (c-set-offset 'class-close           '0)
  (c-set-offset 'inline-open           '0)
  (c-set-offset 'inline-close          '0)
  (c-set-offset 'topmost-intro         '0)
  (c-set-offset 'topmost-intro-cont    '0)
  (c-set-offset 'member-init-intro     '+)
  (c-set-offset 'member-init-cont      '0)
  (c-set-offset 'inher-intro           '0)
  (c-set-offset 'inher-cont            '+)
  (c-set-offset 'block-open            '0)
  (c-set-offset 'block-close           '0)
  (c-set-offset 'brace-list-open       '0)
  (c-set-offset 'brace-list-close      '0)
  (c-set-offset 'brace-list-intro      '+)
  (c-set-offset 'brace-list-entry      '0)
  (c-set-offset 'statement             '0)
  (c-set-offset 'statement-cont        '+)
  (c-set-offset 'statement-block-intro '+)
  (c-set-offset 'statement-case-intro  '+)
  (c-set-offset 'statement-case-open   '+)
  (c-set-offset 'substatement          '+)
  (c-set-offset 'substatement-open     '0)
  (c-set-offset 'case-label            '+)
  (c-set-offset 'access-label          '-)
  (c-set-offset 'label                 '-)
  (c-set-offset 'do-while-closure      '0)
  (c-set-offset 'else-clause           '0)
  (c-set-offset 'comment-intro         '0)
  (c-set-offset 'arglist-intro         '+)
  (c-set-offset 'arglist-cont          '0)
  (c-set-offset 'arglist-cont-nonempty 'c-lineup-arglist)
  (c-set-offset 'arglist-close         '0)
  (c-set-offset 'stream-op             'c-lineup-streamop)
  (c-set-offset 'inclass               '+)
  (c-set-offset 'cpp-macro             '0)
  (c-set-offset 'extern-lang-open      '0)
  (c-set-offset 'extern-lang-close     '0)
  (c-set-offset 'friend                '0)
  (font-lock-add-keywords 'c-mode
			  '(("\\<\\(FIXME\\):" 1 font-lock-warning-face t)
			    ("\\<\\(TODO\\):" 1 font-lock-warning-face t)
			    ("\\<\\(NOTE\\):" 1 font-lock-warning-face t)
			    ("\\<\\(HACK\\):" 1 font-lock-warning-face t))))

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
